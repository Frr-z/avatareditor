"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[716],{49164:e=>{e.exports=JSON.parse('{"functions":[{"name":"isSignal","desc":"Returns whether a class is a signal","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":38,"path":"src/shared/Signal.lua"}},{"name":"new","desc":"Constructs a new signal.","params":[],"returns":[{"desc":"","lua_type":"Signal<T>"}],"function_type":"static","source":{"line":47,"path":"src/shared/Signal.lua"}},{"name":"Fire","desc":"Fire the event with the given arguments. All handlers will be invoked. Handlers follow","params":[{"name":"...","desc":"Variable arguments to pass to handler","lua_type":"T"}],"returns":[],"function_type":"method","source":{"line":75,"path":"src/shared/Signal.lua"}},{"name":"Connect","desc":"Connect a new handler to the event. Returns a connection object that can be disconnected.","params":[{"name":"handler","desc":"Function handler called when `:Fire(...)` is called","lua_type":"(... T) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":96,"path":"src/shared/Signal.lua"}},{"name":"Once","desc":"Connect a new, one-time handler to the event. Returns a connection object that can be disconnected.","params":[{"name":"handler","desc":"One-time function handler called when `:Fire(...)` is called","lua_type":"(... T) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":119,"path":"src/shared/Signal.lua"}},{"name":"Wait","desc":"Wait for fire to be called, and return the arguments it was given.","params":[],"returns":[{"desc":"","lua_type":"T"}],"function_type":"method","yields":true,"source":{"line":139,"path":"src/shared/Signal.lua"}},{"name":"Destroy","desc":"Disconnects all connected events to the signal. Voids the signal as unusable.\\nSets the metatable to nil.","params":[],"returns":[],"function_type":"method","source":{"line":154,"path":"src/shared/Signal.lua"}}],"properties":[],"types":[],"name":"Signal","desc":"Lua-side duplication of the [API of events on Roblox objects](https://create.roblox.com/docs/reference/engine/datatypes/RBXScriptSignal).\\nSignals are needed for to ensure that for local events objects are passed by\\nreference rather than by value where possible, as the BindableEvent objects\\nalways pass signal arguments by value, meaning tables will be deep copied.\\nRoblox\'s deep copy method parses to a non-lua table compatable format.\\nThis class is designed to work both in deferred mode and in regular mode.\\nIt follows whatever mode is set.\\n```lua\\nlocal signal = Signal.new()\\nlocal arg = {}\\nsignal:Connect(function(value)\\n\\tassert(arg == value, \\"Tables are preserved when firing a Signal\\")\\nend)\\nsignal:Fire(arg)\\n```\\n:::info\\nWhy this over a direct [BindableEvent]? Well, in this case, the signal\\nprevents Roblox from trying to serialize and desialize each table reference\\nfired through the BindableEvent.\\n:::","source":{"line":24,"path":"src/shared/Signal.lua"}}')}}]);